{"version":3,"sources":["Component/Utilities.js","Component/TodoForm.js","Component/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["nextId","generateId","TodoForm","tambah","edit","data","inputRef","useRef","useState","nums","setNums","text","setText","useEffect","current","focus","length","body","input","handleTextChange","target","value","ref","type","z","placeholder","onChange","className","onSubmit","e","datax","preventDefault","id","num","alert","Todo","dariApp","hapus","updateList","seconds","setSeconds","completed","setCompleted","setEdit","myInterval","setInterval","prev","clearInterval","aria-label","onClick","App","thoughts","setThoughts","remove","all","filter","cari","newVal","map","item","x","thought","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f5bac4c.chunk.js","sourcesContent":["export function getNewExpirationTime() {\r\n  //*15 detik\r\n    return Date.now() + 15 * 1000;\r\n  }\r\n  \r\n  let nextId = 0;\r\n  export function generateId() {\r\n    nextId += 1;\r\n    const result = nextId;\r\n    return result;\r\n  }","import React, { useState, useRef, useEffect } from 'react';\r\nimport { generateId } from './Utilities';\r\n\r\nconst TodoForm = ({ tambah, edit, data }) => {\r\n\r\n  const inputRef = useRef(null)\r\n  const [nums, setNums] = useState(1)\r\n  const [text, setText] = useState(edit ? edit.text : '')\r\n  useEffect(() => {\r\n    inputRef.current.focus()\r\n    if (data(data).length === 0) {\r\n      setNums(1)\r\n    }\r\n  }, [data])\r\n\r\n  const handleTextChange = ({ target }) => {\r\n    setText(target.value)\r\n  }\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    let datax;\r\n\r\n    if (text.length > 0) {\r\n\r\n      if (edit) {\r\n        datax = {\r\n          id: generateId(),\r\n          num: edit.num,\r\n          text: text\r\n        }\r\n      } else {\r\n        setNums(nums + 1)\r\n        //* tambah({id, num, text, expiresAt})\r\n        datax = {\r\n          id: generateId(),\r\n          num: nums,\r\n          text: text\r\n        }\r\n      }\r\n\r\n      tambah(datax)\r\n      setText('')\r\n\r\n    } else {\r\n      alert(' please add text')\r\n    }\r\n  }\r\n\r\n  let body, input\r\n\r\n  body = (\r\n    <input\r\n      ref={inputRef}\r\n      type=\"text\"\r\n      z placeholder=\"What's on your mind?\"\r\n      value={text}\r\n      onChange={handleTextChange}\r\n    />\r\n  )\r\n  input = (\r\n    <input type=\"submit\" value=\"Add\" />\r\n\r\n  )\r\n  if (edit) {\r\n    body = (\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        placeholder=\"edit\"\r\n        value={text}\r\n        onChange={handleTextChange}\r\n      />\r\n    )\r\n    input = (\r\n      <input type=\"submit\" value=\"Update\" />\r\n    )\r\n  }\r\n  return (\r\n    <form className=\"AddThoughtForm\" onSubmit={handleSubmit} >\r\n      {body}\r\n      {input}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { FaEdit, FaTimes } from 'react-icons/fa'\r\nimport TodoForm from './TodoForm';\r\n\r\n\r\nconst Todo = ({ dariApp, hapus, updateList, data }) => {\r\n\r\n  const [seconds, setSeconds] = useState(15)\r\n  const [completed, setCompleted] = useState(false)\r\n\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    num: 0,\r\n    text: ''\r\n  })\r\n\r\n  const submitUpdate = text => {\r\n    updateList(edit.id, text)\r\n\r\n  }\r\n\r\n  const handleRemoveClick = () => {\r\n    hapus(dariApp.id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //* use setInterval instead setTimeout\r\n    const myInterval = setInterval(() => {\r\n      if (seconds > 0) {\r\n        setSeconds(prev => prev - 1);\r\n      }\r\n      if (seconds === 1) {\r\n        hapus(dariApp.id)\r\n      }\r\n\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(myInterval);\r\n    };\r\n\r\n  })\r\n\r\n  if (edit.text) {\r\n    return <TodoForm edit={edit} tambah={submitUpdate} data={data} />\r\n  }\r\n\r\n\r\n  return (\r\n    <li className={completed ? ' Thought completed ' : ' Thought'} >\r\n      <button\r\n        aria-label=\"Remove thought\"\r\n        className=\"remove-button\"\r\n        onClick={handleRemoveClick}\r\n      >\r\n        <FaTimes />\r\n      </button>\r\n      <button\r\n        aria-label=\"Remove thought\"\r\n        className=\"edit-button\"\r\n        onClick={() => setEdit({ id: dariApp.id, num: dariApp.num, text: dariApp.text })}\r\n      >\r\n        <FaEdit />\r\n      </button>\r\n\r\n      <div className=\"text\" onClick={() => setCompleted(!completed ? true : false)}>\r\n        <span className='num'>{dariApp.num}</span>. {dariApp.text}\r\n      </div>\r\n      <div className=\"text\">\r\n        {seconds} Seconds to delete\r\n       </div>\r\n\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react';\r\nimport TodoForm from './Component/TodoForm';\r\nimport Todo from './Component/Todo';\r\n// import { generateId, getNewExpirationTime } from './Component/Utilities';\r\n\r\nconst App = () => {\r\n\r\n  const [thoughts, setThoughts] = useState([\r\n    // {\r\n    //   id: generateId(),\r\n    //   num: 1,\r\n    //   text: 'This is a place for your passing thoughts.',\r\n    //   expiresAt: getNewExpirationTime(),\r\n    // },\r\n    // {\r\n    //   id: generateId(),\r\n    //   num: 2,\r\n    //   text: \"They'll be removed after 15 seconds.\",\r\n    //   expiresAt: getNewExpirationTime(),\r\n    // },\r\n  ]);\r\n\r\n\r\n  const add = value => {\r\n    setThoughts(prev => [value, ...prev])\r\n  }\r\n\r\n  const remove = id => {\r\n    setThoughts(all =>\r\n      all.filter(cari => cari.id !== id)\r\n    );\r\n  };\r\n\r\n  const updateList = (id, newVal) => {\r\n    setThoughts(prev => prev.map(item => item.id === id ? newVal : item))\r\n  }\r\n\r\n\r\n  const data = () => {\r\n  let val = thoughts.map(x => x)\r\n  return val\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>What Are You Gonna Do ?</h1>\r\n      </header>\r\n      <main>\r\n        <TodoForm tambah={add} data={data}  />\r\n        <ul className=\"thoughts\">\r\n          {thoughts.map((thought) => (\r\n            <Todo\r\n              key={thought.id}\r\n              dariApp={thought}\r\n              hapus={remove}\r\n              updateList={updateList}\r\n              data={data}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}